<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

points_count = 0;

var _size = instance_number( obj_point );
for( var _i = 0; _i &lt; _size; _i++ ) {
    var _inst = instance_find( obj_point, _i );
    
    points[ e_point.x + points_count ] = _inst.x;
    points[ e_point.y + points_count ] = _inst.y;
    points_count += e_point.size;
    
}

var _size = instance_number( obj_shape );
for( var _i = 0; _i &lt; _size; _i++ ) {
    var _inst = instance_find( obj_shape, _i );
    
    points[ e_point.x + points_count ] = _inst.bbox_left;
    points[ e_point.y + points_count ] = _inst.bbox_top;
    points_count += e_point.size;
    
    points[ e_point.x + points_count ] = _inst.bbox_right;
    points[ e_point.y + points_count ] = _inst.bbox_top;
    points_count += e_point.size;
    
    points[ e_point.x + points_count ] = _inst.bbox_left;
    points[ e_point.y + points_count ] = _inst.bbox_bottom;
    points_count += e_point.size;
    
    points[ e_point.x + points_count ] = _inst.bbox_right;
    points[ e_point.y + points_count ] = _inst.bbox_bottom;
    points_count += e_point.size;
    
    points[ e_point.x + points_count ] = mean( _inst.bbox_left, _inst.bbox_right );
    points[ e_point.y + points_count ] = _inst.bbox_top;
    points_count += e_point.size;
    
    points[ e_point.x + points_count ] = mean( _inst.bbox_left, _inst.bbox_right );
    points[ e_point.y + points_count ] = _inst.bbox_bottom;
    points_count += e_point.size;
    
    points[ e_point.x + points_count ] = _inst.bbox_left;
    points[ e_point.y + points_count ] = mean( _inst.bbox_top, _inst.bbox_bottom );
    points_count += e_point.size;
    
    points[ e_point.x + points_count ] = _inst.bbox_right;
    points[ e_point.y + points_count ] = mean( _inst.bbox_top, _inst.bbox_bottom );
    points_count += e_point.size;
    
}

scr_delaunay_bowyer_watson( points,   0, 0, room_width, room_height,   false );
scr_convex_polys_from_triangles( triangles );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

for( var _t = 0; _t &lt; triangles_count; _t += e_triangle.size ) {
    
    if ( point_in_triangle( mouse_x, mouse_y, 
                            triangles[ e_triangle.x1 + _t ], triangles[ e_triangle.y1 + _t ],
                            triangles[ e_triangle.x2 + _t ], triangles[ e_triangle.y2 + _t ],
                            triangles[ e_triangle.x3 + _t ], triangles[ e_triangle.y3 + _t ] ) ) {
        draw_set_colour( c_red );
    } else {
        draw_set_colour( c_black );
    }
    
    draw_set_alpha( 0.2 );
    draw_triangle( triangles[ e_triangle.x1 + _t ], triangles[ e_triangle.y1 + _t ],
                   triangles[ e_triangle.x2 + _t ], triangles[ e_triangle.y2 + _t ],
                   triangles[ e_triangle.x3 + _t ], triangles[ e_triangle.y3 + _t ], false );
    draw_set_alpha( 0.4 );
    draw_triangle( triangles[ e_triangle.x1 + _t ], triangles[ e_triangle.y1 + _t ],
                   triangles[ e_triangle.x2 + _t ], triangles[ e_triangle.y2 + _t ],
                   triangles[ e_triangle.x3 + _t ], triangles[ e_triangle.y3 + _t ], true );
    draw_set_alpha( 1 );
    
}

/*
for( var _y = 0; _y &lt; polygons_count; _y += e_polygon.size ) {
    
    var _polygon_points   = polygons[ _y + e_polygon.points ];
    var _polygon_centre_x = polygons[ _y + e_polygon.centre_x ];
    var _polygon_centre_y = polygons[ _y + e_polygon.centre_y ];
    
    draw_circle( _polygon_centre_x, _polygon_centre_y, 6, false );
    draw_set_colour( make_colour_hsv( 255 * _y / polygons_count, 200, 200 ) );
    draw_circle( _polygon_centre_x, _polygon_centre_y, 5, false );
    
    draw_set_alpha( 0.2 );
    draw_primitive_begin( pr_trianglefan );
    draw_vertex( _polygon_centre_x, _polygon_centre_y );
    
    var _size = ds_list_size( _polygon_points );
    for( var _i = 0; _i &lt; _size; _i += e_point.size ) {
        draw_vertex( ds_list_find_value( _polygon_points, _i + e_point.x ), 
                     ds_list_find_value( _polygon_points, _i + e_point.y ) );
    }
    draw_vertex( ds_list_find_value( _polygon_points, e_point.x ), 
                 ds_list_find_value( _polygon_points, e_point.y ) );
    draw_primitive_end();
    draw_set_alpha( 1 );
    
    draw_set_colour( c_black );
    for( var _i = 0; _i &lt; _size; _i += e_point.size ) {
        var _px = ds_list_find_value( _polygon_points, _i + e_point.x );
        var _py = ds_list_find_value( _polygon_points, _i + e_point.y );
        draw_arrow( _polygon_centre_x, _polygon_centre_y, _px, _py, 16 );
        draw_text( mean( _polygon_centre_x, _px ), mean( _polygon_centre_y, _py ) - 20, _i );
    }
    
}

draw_set_colour( c_black );
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
