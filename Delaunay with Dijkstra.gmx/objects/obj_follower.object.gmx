<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_square</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

path = noone;

node = scr_juju_dijkstra_node_closest( x, y, noone );
x = scr_juju_dijkstra_node_get_x( node );
y = scr_juju_dijkstra_node_get_y( node );

move          = false;
move_ax       = x;
move_ay       = y;
move_bx       = x;
move_by       = y;
move_speed    = 5;
move_arc_t    = 0;
move_arc_dist = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( !move ) {
    
    var _nearest = scr_juju_dijkstra_node_closest( mouse_x, mouse_y, noone );
    if ( _nearest &gt;= 0 ) {
        if ( ds_exists( path, ds_type_list ) ) ds_list_destroy( path );
        path = scr_juju_dijkstra_path_find( node, _nearest, false, false );
    }
    
    if ( mouse_check_button_pressed( mb_left ) ) {
        move          = true;
        move_ax       = path[| e_juju_dijkstra_path.start_x ];
        move_ay       = path[| e_juju_dijkstra_path.start_y ];
        move_bx       = path[| e_juju_dijkstra_path.end_x ];
        move_by       = path[| e_juju_dijkstra_path.end_y ];
        move_arc_t    = 0;
        move_arc_dist = max( 1, point_distance( move_ax, move_ay, move_bx, move_by ) );
    }
    
} else {
    
    move_arc_t += move_speed / move_arc_dist;
    x = lerp( move_ax, move_bx, move_arc_t );
    y = lerp( move_ay, move_by, move_arc_t );
    
    if ( move_arc_t &gt;= 1 ) {
        
        repeat( e_juju_dijkstra_path.size ) ds_list_delete( path, 0 );
        move_arc_t -= 1;
        
        if ( ds_list_empty( path ) ) {
            move = false;
            node = scr_juju_dijkstra_node_closest( x, y, noone );
        } else {
            move_arc_t   *= move_arc_dist;
            move_ax       = path[| e_juju_dijkstra_path.start_x ];
            move_ay       = path[| e_juju_dijkstra_path.start_y ];
            move_bx       = path[| e_juju_dijkstra_path.end_x ];
            move_by       = path[| e_juju_dijkstra_path.end_y ];
            move_arc_dist = max( 1, point_distance( move_ax, move_ay, move_bx, move_by ) );
            move_arc_t   /= move_arc_dist;
            x = lerp( move_ax, move_bx, move_arc_t );
            y = lerp( move_ay, move_by, move_arc_t );
        }
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

if ( ds_exists( path, ds_type_list ) ) scr_juju_dijkstra_draw_path( path, c_red, false );
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
